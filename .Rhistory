save(fb_oauth, "fb_oauth")
save(fb_oauth, file="fb_oauth")
fb_page<- getPage(page="161170137278613", token=fb_oauth,  since='2016/07/01, until='2016/07/31')
fb_page<- getPage(page="161170137278613", token=fb_oauth,  since='2016/07/01', until='2016/07/31')
View(fb_page)
fb_page[,"message"]
quit()
a <- c(1:10)
b <- c(1:20)
c <- c("a","b","c","d","e")
d <- data.frame(a,b,c)
d
x <- list(a,b,c)
x
y <- as.data.frame(x)
y
View(y)
url_data_training <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv";
url_data_testing <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv";
df_training <- read.csv(url(url_data_training));
shiny::runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
library(ggplot2)
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
library(shiny)
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
url_data_training <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv";
url_data_testing <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv";
df_training <- read.csv(url(url_data_training));
df_testing <- read.csv(url(url_data_testing));
tmp_df_training <- df_training[, c(8:160)];
tmp_df_testing <- df_testing[, c(8:160)];
#Clean data
not.na <- function(){
pos_columns <- c()
for(column in c(1:153)){
exist.na <- sum(is.na(tmp_df_testing[,column]))
if(20 == exist.na ){
#print("exist")
}else{
#print("not exist")
pos_columns <- c(pos_columns, column)
}
}
return(pos_columns)
}
columns <- not.na();
#We create two new data set that will be used for analysis
new_df_training <- tmp_df_training[, columns];
new_df_testing <- tmp_df_testing[, columns];
library(randomForest);
rspta <- df_model<-randomForest(classe ~ ., data=new_df_training, ntree=30, mtry=6, replace=T);
rspta
rspta$predicted
rspta$call
rspta$type
rspta$votes
rspta$test
rspta$y
rspta$forest$ntree
rspta$proximity
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
runApp('developrdataproduct/App01')
getwd()
runApp('developrdataproduct/appmagz')
runApp('developrdataproduct/appmagz')
runApp('developrdataproduct/appmagz')
runApp('developrdataproduct/appmagz')
runApp('developrdataproduct/appmagz')
<html>
<html>
runApp('developrdataproduct/appmagz')
quit()
library(data.table)
installed.packages("data.table")
quit()
load.tm <- function(arg)
{
if( (is.null(arg)) ){
install.packages("tm", dependencies=TRUE)
}else{
print("it's installed tm")
library(tm)
}
}
load.data.file <- function(arg) {
con <- file(arg,open="r")
line <- readLines(con)
close(con)
line
}
porcentaje30.data.file <- function(arg, valor) {
tmp <- sample(arg, size = length(arg) * valor)
tmp
}
var.library.tm <- library(tm)
load.tm(var.library.tm)
file1.tmp <- load.data.file("/home/pc/tmp/en_US.blogs.txt")
file2.tmp <- load.data.file("/home/pc/tmp/en_US.news.txt")
file3.tmp <- load.data.file("/home/pc/tmp/en_US.twitter.txt")
file1.01 <- porcentaje30.data.file(file1.tmp, 0.01)
file2.02 <- porcentaje30.data.file(file2.tmp, 0.01)
file3.03 <- porcentaje30.data.file(file3.tmp, 0.01)
files.tmp <- VectorSource(c(file1.01, file2.02, file3.03)
)
corpus.tmp <- Corpus(files.tmp)
doc.tmp <- DocumentTermMatrix(corpus.tmp)
doc.tmp
corpus <- tm_map(corpus.tmp, tolower)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, PlainTextDocument)
library(SnowballC)
corpus <- tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, stripWhitespace)
doc.tmp1 <- DocumentTermMatrix(corpus)
doc.tmp1
freq <- colSums(as.matrix(doc.tmp1))
freq <- colSums(as.matrix(doc.tmp))
findFreqTerms(tdm, lowfreq=20)
findFreqTerms(doc.tmp1, lowfreq=20)
freq <- findFreqTerms(doc.tmp1, lowfreq=20)
order.tmp <- order(freq)
order.tmp
freq[head(ord)]
freq[head(order.tmp)]
freq[tail(order.tmp)]
head(table(freq), 15)
tail(table(freq), 15)
dim(doc.tmp1)
dtms <- removeSparseTerms(doc.tmp1, .1)
dtms
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
wordcloud(names(freq), freq, min.freq=5, rot.per=0.2, scale=c(3, .1), colors=palette)
wordcloud(names(freq), freq, min.freq=5, rot.per=0.2, scale=c(3, .1), colors=palette)
freq
names(freq)
names(freq[])
names(freq[*])
class(freq)
class(freq())
class(freq[,]
)
class(freq[1,])
freq[1,]
freq[,1]
freq
names[freq,]
freq[freq,]
wordcloud(freq, freq, min.freq=5, rot.per=0.2, scale=c(3, .1), colors=palette)
a <- c(freq)
a
names(a)
names(freq[1,freq.length])
names(freq[1,freq.lenght])
names(freq[1,10])
names(freq[1])
names(freq[2])
names(freq[1,1])
names(freq[1:3643])
names(freq[1,3643])
names(freq[3643])
freq[1,]
freq[,1]
a[1]
a[3643]
lista <- c(freq[1]:freq[3643])
lista
c(1:10)
as.list(freq)
b <- as.list(freq)
b
wordcloud(b, freq, min.freq=5, rot.per=0.2, scale=c(3, .1), colors=palette)
wordcloud(b, b, min.freq=5, rot.per=0.2, scale=c(3, .1), colors=palette)
wordcloud(b, freq, min.freq=5, rot.per=0.2, scale=c(3, .1), colors=palette)
wordcloud(b, min.freq=5, rot.per=0.2, scale=c(3, .1), colors=palette)
wordcloud(one_gram, scale=c(5,0.5), max.words=30, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(a, scale=c(5,0.5), max.words=30, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, "Dark2"))
savehistory("~/codigo.txt")
install.packages("markdown")
install.packages("ggplot2")
sourceurl<-"https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
zipfile<-"Coursera-SwiftKey.zip"
download.file(sourceurl,zipfile)
unzip(zipfile)
projectdir<-"final/en_US"
projectfiles<-dir(projectdir)
filesizes<-file.size(paste(projectdir,dir(projectdir),sep="/"))
filesizes
quit()
data("mtcars")
head("mtcars")
mtcars
View(mtcars)
length(mtcars)
size(mtcars)
dim(mtcars)
data(beavers)
beavers
View(beaver1)
apply(t(beaver1),1,max)
apply(t(beaver1),2,max)
apply(t(beaver1),1,max)
apply(t(beaver1),2,max)
apply(mtcars,1,max)
apply(mtcars,2,max)
apply(t(mtcars),2,max)
apply(t(mtcars),1,max)
apply(t(mtcars),2,max)
a <- c(1:10)
b <- c(11:20)
c <- c(21:30)
d <- c(31:40)
df <- data.frame(a,b,c,d)
df
t1 <- apply(df,1, mean)
t1
class(t1)
t2 <- data.frame(t1)
t2
df$e <- t2
df
t3 <- apply(df,2, mean)
df
t3 <- apply(df,2, mean)
df <- data.frame(a,b,c,d)
t3 <- apply(df,2, mean)
t3
df
mean(df$a)
df
View(df)
r1 <- apply(df, 1, mean)
r1
r2 <- apply(df, 2, mean)
r2
lapply(df, mean)
t4 <- lapply(df, mean)
t4
t5 <- lapply(df,"[",1,1)
df
t5 <- lapply(df,"[",1,1)
A <- matrix(1:9,nrow = 3, ncol = 3)
B <- matrix(11:19,nrow = 3, ncol = 3)
C <- matrix(21:29,nrow = 3, ncol = 3)
mi_lista <- list(A,B,C)
t5 <- lapply(mi_lista,"[",1,1)
t5
lapply(df,mean)
r3 <- lapply(df,mean)
r3
r4 <- sapply(df,mean)
r4
r4 <- sapply(df,mean)
quit()
load("Rfacebookproo")
t <- clave$credentials
t
library(jsonlite)
t2 <- fromJSON(t)
t[[1]]
t[[0]]
t[[1,]]
t[[1,1]]
t[1]
t2 <- data.frame(t)
View(t2)
t2[1]
t
t3 <- fromJSON(t)
t3 <- fromJSON(t$`{"access_token":"EAAD8mxZAh5nsBAFTSNZBfoltSpKwGBVr3CP3uqk74uZCaVeIrhoCi0qq5Vw0pTV5DQMU9VqU7FZAVYeOk2fPZB02343HypvV4EXp6f9cTgGaPyPwzWq7ZAXZAfPKa3Y7nhhDZBdWtvysJIN8dEKW9SuLT9kOG6tvukwZD","token_type":"bearer","expires_in":5183727}`)
class(t)
t$`{"access_token":"EAAD8mxZAh5nsBAFTSNZBfoltSpKwGBVr3CP3uqk74uZCaVeIrhoCi0qq5Vw0pTV5DQMU9VqU7FZAVYeOk2fPZB02343HypvV4EXp6f9cTgGaPyPwzWq7ZAXZAfPKa3Y7nhhDZBdWtvysJIN8dEKW9SuLT9kOG6tvukwZD","token_type":"bearer","expires_in":5183727}`
t
t("access_token")
t("access_token",)
t("access_token")
t
t(2,)
t[2,]
t[1,2]
t[1,]
t[1]
t
t1 <- as.data.frame(t)
View(t1)
t1$X..access_token...EAAD8mxZAh5nsBAFTSNZBfoltSpKwGBVr3CP3uqk74uZCaVeIrhoCi0qq5Vw0pTV5DQMU9VqU7FZAVYeOk2fPZB02343HypvV4EXp6f9cTgGaPyPwzWq7ZAXZAfPKa3Y7nhhDZBdWtvysJIN8dEKW9SuLT9kOG6tvukwZD...token_type...bearer...expires_in..5183727.
t[[access_token]]
t[["access_token"]
]
me <- getUsers("me",token=clave)
library(Rfacebook)
me <- getUsers("me",token=clave)
clave$params
clave$private_key
clave$validate()
clave$sign()
clave$print()
clave$credentials
t1 <- clave$credentials
t1
fbOAuth <- function(app_id="277743025645179", app_secret="6da12c05670a8425b4c58efe01db3634", extended_permissions=FALSE, legacy_permissions=FALSE, scope=NULL)
{
## getting callback URL
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
message <- paste("Copy and paste into Site URL on Facebook App Settings:",
full_url, "\nWhen done, press any key to continue...")
## prompting user to introduce callback URL in app page
invisible(readline(message))
## a simplified version of the example in httr package
facebook <- oauth_endpoint(
authorize = "https://www.facebook.com/dialog/oauth",
access = "https://graph.facebook.com/oauth/access_token")
myapp <- oauth_app("facebook", app_id, app_secret)
if (is.null(scope)) {
if (extended_permissions==TRUE){
scope <- c("user_birthday", "user_hometown", "user_location", "user_relationships",
"publish_actions","user_status","user_likes")
}
else { scope <- c("public_profile", "user_friends")}
if (legacy_permissions==TRUE) {
scope <- c(scope, "read_stream")
}
}
if (packageVersion('httr') < "1.2"){
stop("Rfacebook requires httr version 1.2.0 or greater")
}
## with early httr versions
if (packageVersion('httr') <= "0.2"){
facebook_token <- oauth2.0_token(facebook, myapp,
scope=scope)
fb_oauth <- sign_oauth2.0(facebook_token$access_token)
if (GET("https://graph.facebook.com/me", config=fb_oauth)$status==200){
message("Authentication successful.")
}
}
## less early httr versions
if (packageVersion('httr') > "0.2" & packageVersion('httr') <= "0.6.1"){
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## httr version from 0.6 to 1.1
if (packageVersion('httr') > "0.6.1" & packageVersion('httr') < "1.2"){
Sys.setenv("HTTR_SERVER_PORT" = "1410/")
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## httr version after 1.2
if (packageVersion('httr') >= "1.2"){
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## identifying API version of token
error <- tryCatch(callAPI('https://graph.facebook.com/pablobarbera', fb_oauth),
error = function(e) e)
if (inherits(error, 'error')){
class(fb_oauth)[4] <- 'v2'
}
if (!inherits(error, 'error')){
class(fb_oauth)[4] <- 'v1'
}
return(fb_oauth)
}
fbOAuth <- function(app_id, app_secret, extended_permissions=FALSE, legacy_permissions=FALSE, scope=NULL)
{
## getting callback URL
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
message <- paste("Copy and paste into Site URL on Facebook App Settings:",
full_url, "\nWhen done, press any key to continue...")
## prompting user to introduce callback URL in app page
invisible(readline(message))
## a simplified version of the example in httr package
facebook <- oauth_endpoint(
authorize = "https://www.facebook.com/dialog/oauth",
access = "https://graph.facebook.com/oauth/access_token")
myapp <- oauth_app("facebook", app_id, app_secret)
if (is.null(scope)) {
if (extended_permissions==TRUE){
scope <- c("user_birthday", "user_hometown", "user_location", "user_relationships",
"publish_actions","user_status","user_likes")
}
else { scope <- c("public_profile", "user_friends")}
if (legacy_permissions==TRUE) {
scope <- c(scope, "read_stream")
}
}
if (packageVersion('httr') < "1.2"){
stop("Rfacebook requires httr version 1.2.0 or greater")
}
## with early httr versions
if (packageVersion('httr') <= "0.2"){
facebook_token <- oauth2.0_token(facebook, myapp,
scope=scope)
fb_oauth <- sign_oauth2.0(facebook_token$access_token)
if (GET("https://graph.facebook.com/me", config=fb_oauth)$status==200){
message("Authentication successful.")
}
}
## less early httr versions
if (packageVersion('httr') > "0.2" & packageVersion('httr') <= "0.6.1"){
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## httr version from 0.6 to 1.1
if (packageVersion('httr') > "0.6.1" & packageVersion('httr') < "1.2"){
Sys.setenv("HTTR_SERVER_PORT" = "1410/")
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## httr version after 1.2
if (packageVersion('httr') >= "1.2"){
fb_oauth <- oauth2.0_token(facebook, myapp,
scope=scope, cache=FALSE)
if (GET("https://graph.facebook.com/me", config(token=fb_oauth))$status==200){
message("Authentication successful.")
}
}
## identifying API version of token
error <- tryCatch(callAPI('https://graph.facebook.com/pablobarbera', fb_oauth),
error = function(e) e)
if (inherits(error, 'error')){
class(fb_oauth)[4] <- 'v2'
}
if (!inherits(error, 'error')){
class(fb_oauth)[4] <- 'v1'
}
return(fb_oauth)
}
clave1 <- fbOAuth("277743025645179", "6da12c05670a8425b4c58efe01db3634", extended_permissions=FALSE, legacy_permissions=FALSE, scope=NULL)
clave1 <- fbOAuth("277743025645179", "6da12c05670a8425b4c58efe01db3634", extended_permissions=FALSE, legacy_permissions=FALSE, scope=NULL)
clave1
me <- getUsers("me", token = clave1)
View(me)
me1 <- getUsers("me", token = clave)
quit()
shiny::runApp('tmp/App01')
quit()
setwd("ReproducibleResearch/proyectoActualizado/RepData_PeerAssessment1/")
if( !(file.exists("data/data_activity.zip") == TRUE) ){
dir.create('data')
download.file("http://d396qusza40orc.cloudfront.net/repdata/data/activity.zip", destfile="data/data_activity.zip")
unzip('data/data_activity.zip', exdir='data')
}
if( !(file.exists("data/data_activity.zip") == TRUE) ){
dir.create('data')
download.file("http://d396qusza40orc.cloudfront.net/repdata/data/activity.zip", destfile="data/data_activity.zip")
unzip('data/data_activity.zip', exdir='data')
}else{
print(" existe data ")
}
data <- read.csv('data/activity.csv')
dim(data)
View(data)
head(data)
length(data)
row(data)
nrow(data)
subdata = data[!is.na(data$steps), ]
head(subdata)
nrow(data)
num.steps.date <- aggregate(subdata$steps, list(subdata$date), sum)
colnames(num.steps.date) <- c("date", "steps")
View(num.steps.date)
head(num.steps.date)
